{
  "name": "Is Analytics Attempts Over Time",
  "id": "IsAnalyticsAttemptsOverTime",
  "thumbnailURL": "",
  "configs": {
    "pubsub": {
      "types": [
        "subscriber",
      ]
    },
    "options": [
      {
        "id": "widgetType",
        "title": "Widget Type",
        "type": {
          "name": "ENUM",
          "possibleValues": [
            "Overall",
            "Local",
            "Federated"
          ]
        },
        "defaultValue": "Overall"
      }
    ],
    "providerConfig": {
      "configs": {
        "type": "SiddhiStoreDataProvider",
        "config": {
          "siddhiApp": "@App:name(\"IsAnalytics_Authentication_Aggregations\") @App:description(\"Handle Event from IS and save data in a table for Overall Authentication\") define stream ProcessedAuthenticationDataStream ( meta_tenantId int, eventId string, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, successValue int, failureValue int, stepSuccessValue int, firstLoginValue int, identityProviderType string, timestamp long ); @store(type='rdbms', datasource='IS_ANALYTICS_DB') define aggregation AuthenticationStatAggregation from ProcessedAuthenticationDataStream select meta_tenantId, username, localUsername, rolesCommaSeparated, serviceProvider, identityProvider, remoteIp, region, userStoreDomain, isFirstLogin, sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, sum(firstLoginValue) as authFirstSuccessCount, identityProviderType, timestamp group by meta_tenantId, username, localUsername, remoteIp, rolesCommaSeparated aggregate by timestamp every second ... year;",
          "queryData": {
            "query": "from AuthenticationStatAggregation {{filterCondition}} within {{from}}L, {{to}}L per \"{{per}}s\" select timestamp, sum(authStepSuccessCount) as SuccessCount, sum(authFailureCount * -1) as FailureCount group by timestamp",
            "queryLocal": "from AuthenticationStatAggregation on identityProviderType==\'LOCAL\' {{filterCondition}} within {{from}}L, {{to}}L per \"{{per}}s\" select timestamp, sum(authSuccessCount) as SuccessCount, sum(authFailureCount * -1) as FailureCount group by timestamp",
            "queryFederated": "from AuthenticationStatAggregation on identityProviderType==\'LOCAL\' {{filterCondition}} within {{from}}L, {{to}}L per \"{{per}}s\" select timestamp, sum(authStepSuccessCount) as SuccessCount, sum(authFailureCount * -1) as FailureCount group by timestamp"
          },
          "publishingInterval": 5,
          "purgingInterval": 60,
          "publishingLimit": 30,
          "purgingLimit": 60,
          "isPurgingEnable": false
        }
      }
    }
  }
}
